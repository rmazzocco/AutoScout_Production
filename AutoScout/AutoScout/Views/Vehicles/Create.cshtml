@model AutoScout.Models.Vehicle

@*By: Evan Bauer & Ryan Mazzocco
    December 2016
    Vehicles/Create.cshtml*@

@{
    ViewBag.Title = "Create";
}

<div class="container-fluid">

    <h2>Add a New Vehicle to Inventory</h2>
    <h3>Details</h3>

    @using (Html.BeginForm(new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <br />

        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-6">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.VIN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.VIN, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.VIN, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Mileage, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Mileage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Mileage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ExteriorColor, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ExteriorColor, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ExteriorColor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.InteriorColor, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.InteriorColor, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.InteriorColor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Transmission, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Transmission, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Transmission, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Style, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Style, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Style, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Condition, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CylinderNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CylinderNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CylinderNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        <div class="col-md-offset-5 col-md-7">
                            <input type="submit" value="Create Vehicle" class="btn btn-default" />
                        </div>
                    </div>
                   
                </div>
            </div>
            
        </div>

    }

    
</div>
    
<script>
    function NewVehicleImageViewModel(file) {
        var self = this;
        self.FileName = file.name;

        self.Src = ko.observable("");

        (function(){
            var src = "";
            var reader = new FileReader();
            reader.onloadend = function () {
                src = reader.result;
            }
            reader.readAsDataURL(file);
            self.Src(src)
        });

    };

    function NewVehicleViewModel() {
        var self = this;
        self.VIN = ko.observable("");
        self.Mileage = ko.observable(0);
        self.ExteriorColor = ko.observable("");
        self.InteriorColor = ko.observable("");
        self.Make = ko.observable("");
        self.Model = ko.observable("");
        self.Year = ko.observable("");
        self.Price = ko.observable("");
        self.Transmission = ko.observable("");
        self.Style = ko.observable("");
        self.Condition = ko.observable("");
        self.CylinderCount = ko.observable("");

        

        self.Images = ko.observableArray([]);

        self.OnFileSelectedEvent = function (vm, evt) {
            ko.utils.arrayForEach(evt.target.files, function (file) {
                self.Images.push(new NewVehicleImageViewModel(file));
            });
        };

        self.AddVehicle = function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("Create", "Vehicles")",
                data: {
                    vin: self.VIN,
                    mileage: self.Mileage,
                    exteriorColor: self.ExteriorColor,
                    interiorColor: self.InteriorColor,
                    make: self.Make,
                    model: self.Model,
                    year: self.Year,
                    price: self.Price,
                    transmission: self.Transmission,
                    style: self.Style,
                    condition: self.Condition,
                    cylinderCount: self.CylinderCount

                },
                success: function (data) {

                }
            });
        };

    }
    ko.applyBindings(NewVehicleViewModel);
</script>

